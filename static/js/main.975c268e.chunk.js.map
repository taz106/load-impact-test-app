{"version":3,"sources":["components/selet.widget.js","components/list.js","service/AppService.js","App.js","serviceWorker.js","index.js"],"names":["SelectWidget","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","validationText","category","subCategory","state","categoryValidationText","subCategoryValidationText","form","React","createRef","onChange","bind","assertThisInitialized","handleSubmit","checkValidity","event","targetId","target","id","value","setState","defineProperty","concat","props","onSelectCategory","preventDefault","onHandleSubmit","react_default","a","createElement","Form","className","onSubmit","Row","Col","FormGroup","Label","for","Input","defaultValue","type","name","required","disabled","categories","map","index","key","subCategories","length","Button","color","Component","UrlList","urls","active","onListItemClick","getItemActiveState","handleScroll","isBottom","Array","fill","document","addEventListener","removeEventListener","_this2","console","log","startElement","prevState","toConsumableArray","listElement","getElementById","onHandleScrollEnd","el","getBoundingClientRect","bottom","window","innerHeight","_this3","ListGroup","url","ListGroupItem","assign","onClick","data","require","AppService","keys","start","slice","App","service","onCategorySelect","onFormSubmit","showUrlList","onScrollEnd","getCategories","getSubCategories","formData","getUrls","list","selet_widget","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.975c268e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Col, Button, Form, FormGroup, Label, Input, Row } from 'reactstrap';\n\nclass SelectWidget extends Component {\n  \n  validationText = {\n    category: '',\n    subCategory: ''\n  }\n\n  constructor() {\n    super();\n\n    this.state = {\n      category: '',\n      subCategory: '',\n      categoryValidationText: '',\n      subCategoryValidationText: '',\n    }\n    this.form = React.createRef();\n\n    this.onChange = this.onChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.checkValidity = this.checkValidity.bind(this);\n  }\n\n  onChange(event) {\n    const targetId = event.target.id;\n    const value = event.target.value;\n    this.setState({[targetId]: value});\n    this.setState({[`${targetId}ValidationText`]: ''});\n\n    if (targetId === 'category') {\n      this.props.onSelectCategory(value);\n    }\n    \n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (this.checkValidity()) {\n      this.props.onHandleSubmit(this.state);\n    }\n    \n  }\n\n  checkValidity() {\n    if (!this.state.category) {\n      this.setState({categoryValidationText: 'This field is required'});\n      return false;\n    }\n\n    if (!this.state.subCategory) {\n      this.setState({subCategoryValidationText: 'This field is required'});\n      return false;\n    }\n    this.setState({categoryValidationText: ''});\n    this.setState({subCategoryValidationText: ''});\n    return true;\n  }\n\n  render() {\n    return (\n      <Form className=\"SelectWidget\" onSubmit={this.handleSubmit}> \n        <Row>\n          <Col>\n            <FormGroup>\n              <Label for=\"category\">Category</Label>\n              <Input defaultValue={'DEFAULT'} \n                type=\"select\" \n                name=\"category\" \n                id=\"category\"\n                onChange={this.onChange}\n                required>\n                  <option value=\"DEFAULT\" disabled>Select Category</option>\n                  { this.props.categories.map((category, index) => <option key={`cat-${index}`}>{ category }</option>) }\n              </Input>\n            </FormGroup>\n            <p className=\"error-msg\">{ this.state.categoryValidationText }</p>\n          </Col>\n\n          <Col>\n            <FormGroup>\n              <Label for=\"subCategory\">Sub-Category</Label>\n              <Input defaultValue={'DEFAULT'} \n                  type=\"select\" \n                  name=\"subCategory\" \n                  id=\"subCategory\" \n                  onChange={this.onChange}\n                  disabled={!this.props.subCategories.length}\n                  required>\n                    <option value=\"DEFAULT\" disabled>Select Sub-Category</option>\n                    { this.props.subCategories.map((subCategory, index) => <option key={`subcat-${index}`}>{ subCategory }</option>) }\n                </Input>\n            </FormGroup>  \n            <p className=\"error-msg\">{ this.state.subCategoryValidationText }</p>  \n          </Col>\n        </Row>\n        \n\n        <Button type=\"submit\" color=\"success\">Submit</Button>\n      </Form>\n    )\n  }\n}\n\nexport default SelectWidget;\n","import React, { Component } from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\n\nclass UrlList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      urls: [],\n      active: []\n    }\n\n    this.onListItemClick = this.onListItemClick.bind(this);\n    this.getItemActiveState = this.getItemActiveState.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.isBottom = this.isBottom.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ active: new Array(this.props.urls.length).fill(false), urls: this.props.urls });\n\n    document.addEventListener('scroll', this.handleScroll)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillReceiveProps() {\n    console.log(this.props);\n    const active = new Array(this.props.urls.length).fill(false);\n    console.log(this.props.startElement);\n    if (this.props.startElement > 0)  {\n      this.setState(prevState => ({urls: [...prevState.urls, ...this.props.urls], active: [...prevState.active, ...active]}));\n    } else {\n      this.setState({urls: this.props.urls, active});\n    }\n    \n  }\n\n  onListItemClick(event, index) {\n    console.log(this.state.active[index]);\n    let active = this.state.active;\n    active[index] = !active[index];\n    this.setState({ active })\n  }\n\n  getItemActiveState(index) {\n    console.log(this.state.active[index]);\n    return this.state.active[index];\n  }\n\n  handleScroll() {\n    const listElement = document.getElementById('urlList')\n    if (this.isBottom(listElement)) {\n      this.props.onHandleScrollEnd();\n    }\n  }\n\n  isBottom(el) {\n    return el.getBoundingClientRect().bottom <= window.innerHeight;\n  }\n\n  render() {\n    return (\n      <div id=\"urlList\">\n        <ListGroup>\n          {\n            this.state.urls.map((url, index) => \n              <ListGroupItem className=\"list-item\"\n                key={`url-${index}`}\n                { ...index }\n                active={ this.state.active[index] }\n                onClick={ event => this.onListItemClick(event, index) }>\n                  { url }\n              </ListGroupItem>\n            )\n          }\n        </ListGroup>\n      </div>\n    )\n  }\n}\n\nexport default UrlList;\n","const data = require('../data/json.json');\n\nclass AppService {\n  \n  getCategories() {\n    return Object.keys(data);\n  }\n\n  getSubCategories(category) {\n    return Object.keys(data[category]);\n  }\n\n  getUrls(category, subCategory, start) {\n    return data[category][subCategory].slice(start, start + 10);\n  }\n}\n\nexport default AppService;\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport SelectWidget from './components/selet.widget';\nimport UrlList  from './components/list';\nimport AppService from './service/AppService';\n\nclass App extends Component {\n  service = new AppService();\n\n  constructor() {\n    super();\n    this.state = {\n      categories: [],\n      subCategories: [],\n      urls: [],\n      startElement: 0,\n      category: '',\n      subCategory: ''\n    }\n\n    this.onCategorySelect = this.onCategorySelect.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n    this.showUrlList = this.showUrlList.bind(this);\n    this.onScrollEnd = this.onScrollEnd.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({categories: this.service.getCategories()});\n  }\n\n  onCategorySelect(category) {\n    this.setState({subCategories: this.service.getSubCategories(category)});\n  }\n\n  onFormSubmit(formData) {\n    const { category, subCategory } = formData;\n    const startElement = 0;\n\n    this.setState({category, subCategory, startElement}, () => {\n      const urls = this.service.getUrls(this.state.category, this.state.subCategory, this.state.startElement);\n\n      this.setState({urls});\n    });\n  }\n\n  showUrlList() {\n    if (this.state.urls.length) {\n      return (\n        <div>\n          <UrlList urls={ this.state.urls }\n            startElement = { this.state.startElement }\n            onHandleScrollEnd={ this.onScrollEnd } />\n        </div>\n      )\n    }\n  }\n\n  onScrollEnd() {\n    let { startElement } = this.state;\n    startElement += 10;\n    this.setState({startElement}, () => {\n      console.log(this.state);\n      const urls = this.service.getUrls(this.state.category, this.state.subCategory, this.state.startElement);\n      this.setState({urls});\n    })\n    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h3>Load Impact Test App</h3>\n        <SelectWidget\n          categories={ this.state.categories } \n          subCategories={ this.state.subCategories }\n          onSelectCategory={ this.onCategorySelect }\n          onHandleSubmit={ this.onFormSubmit } />\n\n        { this.showUrlList() }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}